int main(int arg0, int arg1) {
    header();
    set_timer();
    get_key();
    print_flag();
    return 0x0;
}
int header() {
    puts("Be Quick Or Be Dead 2");
    for (i = 0x0; i <= 0x14; i = i + 0x1) {
            putchar('=');
    }
    rax = puts(0x400a06);
    return rax;
}

int set_timer() {
    if (__sysv_signal(0xe, 0x40075b) == 0xffffffffffffffff) {
            printf("\n\nSomething went terribly wrong. \nPlease contact the admins with \"be-quick-or-be-dead-2.c:%d\".\n", 0x3b);
            rax = exit(0x0);
    }
    else {
            rax = alarm(0x3);
    }
    return rax;
}

unsigned int alarm(unsigned int __seconds) {
    rax = (*alarm)(__seconds);
    return rax;
}

int get_key() {
    puts("Calculating key...");
    *(int32_t *)__TMC_END__ = calculate_key();
    rax = puts("Done calculating key");
    return rax;
}
void calculate_key() {
    fib(0x3f7);
    return;
}
int fib(int arg0) {
    var_24 = arg0; // 0x3f7
    if (var_24 <= 0x1) {
            var_14 = var_24;
    }
    else {
            var_14 = fib(var_24 - 0x2) + fib(var_24 - 0x1);
    }
    rax = var_14;
    return rax;
}

int print_flag() {
    puts("Printing flag:");
    decrypt_flag(*(int32_t *)__TMC_END__);
    rax = puts(0x601080);
    return rax;
}
int decrypt_flag(int arg0) {
    arg = arg0;
    i = 0x0;
    do {
            rax = i;
            if (rax > 0x38) {
                break;
            }
            *(int8_t *)(sign_extend_32(i) + 0x601080) = *(int8_t *)(sign_extend_32(i) + 0x601080) & 0xff ^ *(int8_t *)(sign_extend_32((i + ((i & 0x80000000 ? 0xffffffff : 0x0) >> 0x1e) & 0x3) - ((i & 0x80000000 ? 0xffffffff : 0x0) >> 0x1e)) + &arg) & 0xff;
            if ((i + ((i & 0x80000000 ? 0xffffffff : 0x0) >> 0x1e) & 0x3) - ((i & 0x80000000 ? 0xffffffff : 0x0) >> 0x1e) == 0x3) {
                    arg = arg + 0x1;
            }
            i = i + 0x1;
    } while (true);
    return rax;
}

// 0x601080
0x5d ; ']'                                         ; DATA XREF=print_flag+27
0xaa ; '.'
0x5d ; ']'
0xb8 ; '.'
0x6d ; 'm'
0x97 ; '.'
0x78 ; 'x'
0xac ; '.'
0x5b ; '['
0xab ; '.'
0x5b ; '['
0x88 ; '.'
0x56 ; 'V'
0xaa ; '.'
0x5c ; '\'
0xb8 ; '.'
0x5f ; '_'
0xa2 ; '.'
0x5d ; ']'
0xb4 ; '.'
0x5b ; '['
0x9c ; '.'
0x4d ; 'M'
0xb2 ; '.'
0x42 ; 'B'
0xb6 ; '.'
0x5b ; '['
0xb9 ; '.'
0x57 ; 'W'
0xa6 ; '.'
0x61 ; 'a'
000000000060109f         db  0xb4 ; '.'
00000000006010a0         db  0x54 ; 'T'
00000000006010a1         db  0xad ; '.'
00000000006010a2         db  0x61 ; 'a'
00000000006010a3         db  0xb5 ; '.'
00000000006010a4         db  0x53 ; 'S'
00000000006010a5         db  0x9c ; '.'
00000000006010a6         db  0x5a ; 'Z'
00000000006010a7         db  0xb8 ; '.'
00000000006010a8         db  0x59 ; 'Y'
00000000006010a9         db  0xa6 ; '.'
00000000006010aa         db  0x61 ; 'a'
00000000006010ab         db  0xb1 ; '.'
00000000006010ac         db  0x59 ; 'Y'
00000000006010ad         db  0xb0 ; '.'
00000000006010ae         db  0x4a ; 'J'
00000000006010af         db  0x88 ; '.'
00000000006010b0         db  0x0e ; '.'
00000000006010b1         db  0xf0 ; '.'
00000000006010b2         db  0x5b ; '['
00000000006010b3         db  0xe5 ; '.'
00000000006010b4         db  0x0e ; '.'
00000000006010b5         db  0xf6 ; '.'
00000000006010b6         db  0x0f ; '.'
00000000006010b7         db  0xb2 ; '.'
00000000006010b8         db  0x46 ; 'F'
00000000006010b9         db  0x00 ; '.'
00000000006010ba         db  0x00 ; '.'
00000000006010bb         db  0x00 ; '.'
